{"version":3,"sources":["logo.svg","components/Card/index.js","utils/utils.js","containers/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","onClick","src","image","randomizeArray","arr","sort","a","b","Math","floor","random","showMessage","message","alert","Game","cards","id","cardClicked","card","state","clickedCards","includes","setState","score","length","hihestScore","max","this","map","index","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,0KCO5BC,G,MAJJ,SAACC,GACR,OAAO,yBAAKC,UAAU,uBAAuBC,QAASF,EAAME,SAAS,yBAAKC,IAAKH,EAAMI,WCJlF,SAASC,EAAeC,GAC3B,OAAOA,EAAIC,MAAK,SAACC,EAAEC,GAAH,OAAOC,KAAKC,MAAMD,KAAKE,SAAS,IAAI,GAAG,IAAI,GAAG,KAG3D,SAASC,EAAYC,GACxBC,MAAMD,GAGK,ICmFAE,E,YA1DX,WAAYhB,GACX,IAAD,8BACI,4CAAMA,KA7BViB,MAAM,CACF,CACAC,GAAG,aACHd,MAAM,gFAEN,CACAc,GAAG,OACHd,MAAM,2EAEN,CACAc,GAAG,QACHd,MAAM,2EAEN,CACAc,GAAG,QACHd,MAAM,2EAEN,CACAc,GAAG,OACHd,MAAM,2EAEN,CACAc,GAAG,QACHd,MAAM,4EAKV,EAYAe,YAAY,SAACC,GACL,EAAKC,MAAMC,aAAaC,SAASH,EAAKF,KAGtCL,EAAY,cACZ,EAAKW,SAAS,CACVF,aAAa,GACbG,MAAM,EACNR,MAAMZ,EAAe,EAAKgB,MAAMJ,UAE9B,EAAKI,MAAMC,aAAaI,OAAO,IAAI,EAAKL,MAAMJ,MAAMS,QAE1Db,EAAY,aACZ,EAAKW,SAAS,CACVF,aAAa,GACbG,MAAM,EACNE,YAAY,EAAKN,MAAMJ,MAAMS,OAC7BT,MAAMZ,EAAe,EAAKgB,MAAMJ,UAMpC,EAAKO,SAAS,CACVP,MAAMZ,EAAe,EAAKgB,MAAMJ,OAChCK,aAAa,GAAD,mBAAK,EAAKD,MAAMC,cAAhB,CAA8BF,EAAKF,KAAKO,MAAM,EAAKJ,MAAMI,MAAM,EAC3EE,YAAYjB,KAAKkB,IAAI,EAAKP,MAAMI,MAAM,EAAG,EAAKJ,MAAMM,gBApC5D,EAAKN,MAAM,CACPJ,MAAM,EAAKA,MACXK,aAAa,GACbG,MAAM,EACNE,YAAY,GANpB,E,sEA0CC,IAAD,OACI,OAAO,6BACH,2CACA,yBAAK1B,UAAU,SACX,2CAAiB4B,KAAKR,MAAMI,OAC5B,mDAAyBI,KAAKR,MAAMM,cAGxC,yBAAK1B,UAAU,OACd4B,KAAKZ,MAAMa,KAAI,SAACV,EAAMW,GAAP,OAAe,kBAAC,EAAD,CAAMC,IAAKD,EAAO7B,QAAS,kBAAI,EAAKiB,YAAYC,IAAMhB,MAAOgB,EAAKhB,iB,GAjF1F6B,aCKJC,MAJf,WACE,OAAO,kBAAE,EAAF,OCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.45880ec5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport './styles.css';\n\nconst Card=(props)=>{\n    return <div className=\"col-3 card-component\" onClick={props.onClick}><img src={props.image}></img></div>\n}\n\nexport default Card;","export function randomizeArray(arr){\n    return arr.sort((a,b)=>Math.floor(Math.random()%2===0)>500?1:-1);\n    }\n\nexport function showMessage(message){\n    alert(message);\n}\n\nexport default {\n    randomizeArray,\n    showMessage\n}","import React, {Component} from 'react';\nimport Card from '../../components/Card/index';\nimport {randomizeArray, showMessage} from '../../utils/utils'\n\nclass Game extends Component\n{\n    cards=[\n        {\n        id:\"sunglasses\", \n        image:\"https://i.pinimg.com/originals/f6/8f/05/f68f054a0b7f5a3148e9f7c505ef1e1b.png\"\n        },\n        {\n        id:\"wink\", \n        image:\"https://i.pinimg.com/564x/34/8c/2c/348c2cd0c2bb092e495dc0afb81cb854.jpg\"\n        },\n        {\n        id:\"teary\", \n        image:\"https://i.pinimg.com/564x/35/93/9a/35939a3c17f484ac0934f43be0e23ca8.jpg\"\n        },\n        {\n        id:\"hands\", \n        image:\"https://i.pinimg.com/564x/4a/57/2f/4a572f02356a81f776b3402ff7b903b2.jpg\"\n        },\n        {\n        id:\"nerd\", \n        image:\"https://i.pinimg.com/564x/97/21/69/9721692edf1a8d8158f1f0a38aac8705.jpg\"\n        },\n        {\n        id:\"happy\", \n        image:\"https://i.pinimg.com/564x/ba/fc/10/bafc108eec3575947153dac36ae58206.jpg\"\n        }\n    ]\n\n    constructor(props)\n    {\n        super(props);\n        this.state={\n            cards:this.cards, \n            clickedCards:[], \n            score:0, \n            hihestScore:0\n        }\n    }\n\n\n\n    cardClicked=(card)=>{\n        if (this.state.clickedCards.includes(card.id))\n        {\n            // alert(\"you lose\");\n            showMessage(\"You Lose!!\")\n            this.setState({\n                clickedCards:[], \n                score:0,\n                cards:randomizeArray(this.state.cards)\n            });\n        } else if(this.state.clickedCards.length+1===this.state.cards.length)\n        {\n            showMessage(\"You Win!!\")\n            this.setState({\n                clickedCards:[], \n                score:0,\n                hihestScore:this.state.cards.length,\n                cards:randomizeArray(this.state.cards)\n            });\n        }\n        else\n        {\n            // alert(\"you win\")\n            this.setState({\n                cards:randomizeArray(this.state.cards),\n                clickedCards:[...this.state.clickedCards, card.id], score:this.state.score+1, \n                hihestScore:Math.max(this.state.score+1, this.state.hihestScore)})\n        }\n    }\n    render()\n    {\n        return <div>\n            <h1>Clicky Game</h1>\n            <div className=\"col-6\">\n                <h2>Your Score: {this.state.score}</h2>\n                <h2>Your Highest Score: {this.state.hihestScore}</h2>\n\n            </div>\n            <div className=\"row\">\n            {this.cards.map((card, index)=><Card key={index} onClick={()=>this.cardClicked(card)}image={card.image}/>)}\n            </div>\n        </div>\n    }\n}\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './containers/Game'\n\nfunction App() {\n  return < Game />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}